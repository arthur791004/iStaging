{"version":3,"sources":["services/ENVS/index.js","services/Firebase/index.js","stores/panoramases/index.js","services/Devices/index.js","stores/panoramases/constants.js"],"names":["ENVS","Proxy","process","get","target","name","concat","services_Firebase","app","db","ref","init","_this","databaseURL","FIREBASE_DATABASE_URL","serviceAccount","window","atob","FIREBASE_SERVICE_ACCOUNT","firebaseApp","initializeApp","database","getRef","close","goOffline","delete","formatPanoramas","id","panoramas","data","_panoramas$data","index","mobileUrl","desktopUrl","thumbnail","category","src","Boolean","bowser","mobile","tablet","Panoramases","action","bound","selectPanoramasList","createTransformer","buildingID","buildings","map","panoramasID","panoramases","sort","a","b","_this2","this","isLoading","setIsLoading","Firebase","NAME","orderByChild","ORDER_KEY","equalTo","once","then","snapshot","val","Error","setBuilding","setPanoramases","catch","error","setError","Object","keys","assign","message","observable","__webpack_exports__","__webpack_require__","r","d"],"mappings":"uPAQeA,SAJF,IAAIC,MAAMC,otGAAa,CAClCC,IAAK,SAACC,EAAQC,GAAT,OAAkBD,EAAM,GAAAE,OAHhB,cAGgBA,OAAaD,QC4C7BE,EAAA,6CA3CbC,IAAM,UACNC,GAAK,UACLC,IAAM,QAENC,KAAO,WACL,IAAIC,EAAKJ,IAAT,CAIA,IAAMK,EAAcb,EAAKc,sBACnBC,EAAiBC,OAAOC,KAAKjB,EAAKkB,0BAExCN,EAAKJ,IAAMW,IAAYC,cAAc,CACnCP,cACAE,mBAGFH,EAAKH,GAAKG,EAAKJ,IAAIa,kBAGrBC,OAAS,SAACjB,GASR,OARKO,EAAKH,IACRG,EAAKD,OAGFC,EAAKF,IAAIL,KACZO,EAAKF,IAAIL,GAAQO,EAAKH,GAAGC,IAAR,IAAAJ,OAAgBD,KAG5BO,EAAKF,IAAIL,SAGlBkB,MAAQ,WACFX,EAAKH,IACPG,EAAKH,GAAGe,YAGNZ,EAAKJ,KACPI,EAAKJ,IAAIiB,mBCrCTC,EAAkB,SAACC,EAAIC,GAC3B,IAAMA,IAAaA,EAAUC,KAC3B,MAAO,GAFgC,IAAAC,EAWrCF,EAAUC,KALZE,EANuCD,EAMvCC,MACAC,EAPuCF,EAOvCE,UACAC,EARuCH,EAQvCG,WAKF,MAAO,CACLN,KACAI,QACAG,UAhBuCJ,EASvCI,UAQAC,SAjBuCL,EAUvCK,SAQAC,ICvB4BC,QAAQC,IAAOC,QAAUD,IAAOE,QDuBxCR,EAAYC,IAI9BQ,KAcHC,SAAOC,QA+BPD,SAAOC,QAKPD,SAAOC,QAKPD,SAAOC,QAKPD,SAAOC,8KAtDRC,oBAAsBC,YAAkB,SAACC,GAGvC,OAFoBlC,EAAKmC,UAAUD,IAAe,IAG/CE,IAAI,SAAAC,GAAW,OAAIvB,EAAgBuB,EAAarC,EAAKsC,YAAYD,MACjEE,KAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAErB,MAAQsB,EAAEtB,8DAIhBe,GAAY,IAAAQ,EAAAC,KACtBA,KAAKC,YAITD,KAAKE,cAAa,GAEGC,EAASpC,OAAOqC,QAClCC,aAAaC,aACbC,QAAQhB,GAEEiB,KAAK,SACfC,KAAK,SAACC,GACL,IAAMf,EAAce,EAASC,MAE7B,IAAKhB,EACH,MAAM,IAAIiB,MAAJ,4CAAA7D,OAAsDwC,IAG9DQ,EAAKc,YAAYtB,EAAYI,GAC7BI,EAAKe,eAAenB,KAErBoB,MAAM,SAACC,GACNjB,EAAKkB,SAASD,KAEfP,KAAK,WACJV,EAAKG,cAAa,0CAKZX,EAAYI,GACtBK,KAAKR,UAAUD,GAAc2B,OAAOC,KAAKxB,0CAI5BA,GACbK,KAAKL,YAAcuB,OAAOE,OAAOpB,KAAKL,YAAaA,wCAIxCM,GACXD,KAAKC,UAAYA,mCAIVe,GACPhB,KAAKgB,MAAQA,EAAMK,gDA7DpBC,uFAAuB,gCACvBA,uFAAmB,yCACnBA,sFAAyB,qCACzBA,sFAAuB,qiBA8DXC,EAAA,YAAIrC,mCE/FnBsC,EAAAC,EAAAF,GAAAC,EAAAE,EAAAH,EAAA,yBAAAnB,IAAAoB,EAAAE,EAAAH,EAAA,8BAAAjB,IAAO,IAAMF,EAAO,YACPE,EAAY","file":"static/js/panoramases.e76318be.chunk.js","sourcesContent":["// You must create custom environment variables beginning with REACT_APP_.\n// Any other variables except NODE_ENV will be ignored\nconst PREFIX = 'REACT_APP_';\n\nconst ENVS = new Proxy(process.env, {\n  get: (target, name) => target[`${PREFIX}${name}`],\n});\n\nexport default ENVS;\n","import firebaseApp from '@firebase/app';\nimport '@firebase/database';\n\nimport ENVS from '@/services/ENVS';\n\nclass Firebase {\n  app = null;\n  db = null;\n  ref = {};\n\n  init = () => {\n    if (this.app) {\n      return;\n    }\n\n    const databaseURL = ENVS.FIREBASE_DATABASE_URL;\n    const serviceAccount = window.atob(ENVS.FIREBASE_SERVICE_ACCOUNT);\n\n    this.app = firebaseApp.initializeApp({\n      databaseURL,\n      serviceAccount,\n    });\n\n    this.db = this.app.database();\n  };\n\n  getRef = (name) => {\n    if (!this.db) {\n      this.init();\n    }\n\n    if (!this.ref[name]) {\n      this.ref[name] = this.db.ref(`/${name}`);\n    }\n\n    return this.ref[name];\n  }\n\n  close = () => {\n    if (this.db) {\n      this.db.goOffline();\n    }\n\n    if (this.app) {\n      this.app.delete();\n    }\n  }\n}\n\nexport default new Firebase();\n","import { action, observable } from 'mobx';\nimport { createTransformer } from 'mobx-utils';\n\nimport { isHandheld } from '@/services/Devices';\nimport Firebase from '@/services/Firebase';\nimport { NAME, ORDER_KEY } from './constants';\n\nconst formatPanoramas = (id, panoramas) => {\n  if (!(panoramas && panoramas.data)) {\n    return {};\n  }\n\n  const {\n    index,\n    mobileUrl,\n    desktopUrl,\n    thumbnail,\n    category,\n  } = panoramas.data;\n\n  return {\n    id,\n    index,\n    thumbnail,\n    category,\n    src: isHandheld() ? mobileUrl : desktopUrl,\n  };\n};\n\nclass Panoramases {\n  @observable isLoading = false;\n  @observable error = null;\n  @observable panoramases = {};\n  @observable buildings = {};\n\n  selectPanoramasList = createTransformer((buildingID) => {\n    const panoramases = this.buildings[buildingID] || [];\n\n    return panoramases\n      .map(panoramasID => formatPanoramas(panoramasID, this.panoramases[panoramasID]))\n      .sort((a, b) => a.index - b.index);\n  });\n\n  @action.bound\n  getBuildingByID(buildingID) {\n    if (this.isLoading) {\n      return;\n    }\n\n    this.setIsLoading(true);\n\n    const refPanoramas = Firebase.getRef(NAME)\n      .orderByChild(ORDER_KEY)\n      .equalTo(buildingID);\n\n    refPanoramas.once('value')\n      .then((snapshot) => {\n        const panoramases = snapshot.val();\n\n        if (!panoramases) {\n          throw new Error(`Cannot find panoramases with buildingID: ${buildingID}`);\n        }\n\n        this.setBuilding(buildingID, panoramases);\n        this.setPanoramases(panoramases);\n      })\n      .catch((error) => {\n        this.setError(error);\n      })\n      .then(() => {\n        this.setIsLoading(false);\n      });\n  }\n\n  @action.bound\n  setBuilding(buildingID, panoramases) {\n    this.buildings[buildingID] = Object.keys(panoramases);\n  }\n\n  @action.bound\n  setPanoramases(panoramases) {\n    this.panoramases = Object.assign(this.panoramases, panoramases);\n  }\n\n  @action.bound\n  setIsLoading(isLoading) {\n    this.isLoading = isLoading;\n  }\n\n  @action.bound\n  setError(error) {\n    this.error = error.message;\n  }\n}\n\nexport default new Panoramases();\n","import bowser from 'bowser';\n\nexport const isHandheld = () => Boolean(bowser.mobile || bowser.tablet);\n","export const NAME = 'panoramas';\nexport const ORDER_KEY = 'Building';\n"],"sourceRoot":""}